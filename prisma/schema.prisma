datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String 
  imageUrl String @db.Text
  email String @db.Text
  server Server[]
  members Member[]
  channels Channel[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text 
  inviteCode String @unique
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members Member[]
  channels Channel[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)
  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("memberOne")
  conversationsRecieved Conversation[] @relation("memberTwo")

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([serverId])
}

enum TypeEnum {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type TypeEnum @default(TEXT)

  messages Message[]

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@index([profileId])
  @@index([serverId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text

  delete Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  
  @@index([memberId])
  @@index([channelId])

}

model Conversation { 
  id String @id @default(uuid())

  directMessages DirectMessage[]

  memberOneId String
  memberOne Member @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String @db.Text
  deleted Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}